<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppName" xml:space="preserve">
    <value>Border Crossing</value>
  </data>
  <data name="Arrival" xml:space="preserve">
    <value>Arrival</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Day" xml:space="preserve">
    <value>Every Day</value>
  </data>
  <data name="Days" xml:space="preserve">
    <value>Days</value>
  </data>
  <data name="Departure" xml:space="preserve">
    <value>Departure</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>amakhin@hotmail.com</value>
    <comment>@Invariant</comment>
  </data>
  <data name="Every12Hours" xml:space="preserve">
    <value>Every 12 Hours</value>
  </data>
  <data name="HomeNav" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="HomeP1" xml:space="preserve">
    <value>This program parses the history of locations from Google, finds the dates of crossing state borders and calculates the number of days spent in each state.</value>
  </data>
  <data name="HomeP21" xml:space="preserve">
    <value>The required initial data is a file with the history of locations, how to get it, see</value>
  </data>
  <data name="HomeP22" xml:space="preserve">
    <value>here</value>
  </data>
  <data name="HomeP3" xml:space="preserve">
    <value>Limitations: Google records location information almost every minute, and if you check each point, the verification process can take a long time, so the program checks two points per day, which can significantly speed up the process, but, on the other hand, with this algorithm, short trips can be lost.</value>
  </data>
  <data name="HomeP4" xml:space="preserve">
    <value>Known Issues: Sometimes inaccurate country identification in coastal areas. In this version, countries are limited to Europe, and the frequency of checks is twice a day.</value>
  </data>
  <data name="HomeP5" xml:space="preserve">
    <value>Please write about the problems found at</value>
  </data>
  <data name="HomeTitle" xml:space="preserve">
    <value>What is it?</value>
  </data>
  <data name="Hour" xml:space="preserve">
    <value>Every Hour</value>
  </data>
  <data name="HowNav" xml:space="preserve">
    <value>How</value>
  </data>
  <data name="HowP11" xml:space="preserve">
    <value>Open page</value>
  </data>
  <data name="HowP12" xml:space="preserve">
    <value>(authorization may be required).</value>
  </data>
  <data name="HowP2" xml:space="preserve">
    <value>Leave only location history selected,</value>
  </data>
  <data name="HowP4" xml:space="preserve">
    <value>In the next step, do not change anything.</value>
  </data>
  <data name="HowP5" xml:space="preserve">
    <value>Wait for the mail with a link to the file, download it to your computer or mobile device.</value>
  </data>
  <data name="HowP61" xml:space="preserve">
    <value>Go to</value>
  </data>
  <data name="HowP62" xml:space="preserve">
    <value>page</value>
  </data>
  <data name="HowP63" xml:space="preserve">
    <value>Select the downloaded file (usually it has a name like takeout-20200707T092637Z-001.zip) and wait for the result.</value>
  </data>
  <data name="HowP7" xml:space="preserve">
    <value>The longest part is uploading the file to the service, with a low Internet speed and a large history file size, this step can take 10-15 minutes, so it is recommended to be patient and upload the file to a device with a high speed Internet connection.</value>
  </data>
  <data name="HowTitle" xml:space="preserve">
    <value>How to use?</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="Processing" xml:space="preserve">
    <value>Processing</value>
  </data>
  <data name="QueryEndDateLabel" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="QueryStartDateLabel" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="ResultKeepUrl" xml:space="preserve">
    <value>If you keep the link to this page, you will be able to access the results without re-downloading the file.</value>
  </data>
  <data name="ResultNodFound" xml:space="preserve">
    <value>No results found</value>
  </data>
  <data name="Run" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="UploadBrowse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="UploadNav" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="UploadP1" xml:space="preserve">
    <value>Attention! The upload may take a long time.</value>
  </data>
  <data name="UploadP2" xml:space="preserve">
    <value>Preparing</value>
  </data>
  <data name="UploadP3" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="ZipWarning" xml:space="preserve">
    <value>File should be .zip archive</value>
  </data>
</root>